{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createTextVNode as _createTextVNode, createStaticVNode as _createStaticVNode } from \"vue\";\n\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"aiz-titlebar mt-2 mb-4\"\n}, [/*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"row align-items-center\"\n}, [/*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"col-md-6\"\n}, [/*#__PURE__*/_createElementVNode(\"b\", {\n  class: \"h4\"\n}, \"Conversations\")])])], -1\n/* HOISTED */\n);\n\nconst _hoisted_2 = {\n  class: \"card\"\n};\nconst _hoisted_3 = {\n  class: \"card-body\"\n};\nconst _hoisted_4 = {\n  class: \"list-group list-group-flush\"\n};\nconst _hoisted_5 = {\n  key: 0,\n  class: \"list-group-item px-0\"\n};\nconst _hoisted_6 = {\n  class: \"row gutters-10\"\n};\nconst _hoisted_7 = {\n  class: \"col-auto\"\n};\nconst _hoisted_8 = {\n  class: \"media\"\n};\nconst _hoisted_9 = {\n  class: \"avatar avatar-sm flex-shrink-0\"\n};\nconst _hoisted_10 = [\"src\"];\nconst _hoisted_11 = [\"src\"];\n\nconst _hoisted_12 = /*#__PURE__*/_createStaticVNode(\"<div class=\\\"col-auto col-lg-3\\\"><p><!-- @if (Auth::user()-&gt;id == $conversation-&gt;sender_id) --><span class=\\\"fw-600\\\">receiver-&gt;name</span><!-- @else --><span class=\\\"fw-600\\\">sender-&gt;name</span><!-- @endif --><br><span class=\\\"opacity-50\\\"><!-- {{ date(&#39;h:i:m d-m-Y&#39;, strtotime($conversation-&gt;messages-&gt;last()-&gt;created_at)) }} --></span></p></div><div class=\\\"col-12 col-lg\\\"><div class=\\\"block-body\\\"><div class=\\\"block-body-inner pb-3\\\"><div class=\\\"row no-gutters\\\"><div class=\\\"col\\\"><h6 class=\\\"mt-0\\\">n. <a href=\\\"seller.conversations.show&#39;, encrypt($conversation-&gt;id\\\" class=\\\"text-dark fw-600\\\"> conversation-&gt;title </a><!-- @if ((Auth::user()-&gt;id == $conversation-&gt;sender_id &amp;&amp; $conversation-&gt;sender_viewed == 0) || (Auth::user()-&gt;id == $conversation-&gt;receiver_id &amp;&amp; $conversation-&gt;receiver_viewed == 0)) --><span class=\\\"badge badge-inline badge-danger\\\">New</span><!-- @endif --></h6></div></div><p class=\\\"mb-0 opacity-50\\\"><!-- {{ $conversation-&gt;messages-&gt;last()-&gt;message }} --></p></div></div></div>\", 2);\n\nconst _hoisted_14 = /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"aiz-pagination\"\n}, [/*#__PURE__*/_createCommentVNode(\" {{ $conversations->links() }} \")], -1\n/* HOISTED */\n);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_hoisted_1, _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"ul\", _hoisted_4, [_createCommentVNode(\" @foreach ($conversations as $key => $conversation)\\r\\n              @if ($conversation->receiver != null && $conversation->sender != null) \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.conversations, (conversation, index) => {\n    return _openBlock(), _createElementBlock(_Fragment, {\n      key: index\n    }, [conversation.receiver != null && conversation.sender != null ? (_openBlock(), _createElementBlock(\"li\", _hoisted_5, [_createElementVNode(\"div\", _hoisted_6, [_createElementVNode(\"div\", _hoisted_7, [_createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"span\", _hoisted_9, [$data.auth.user.id == conversation.sender_id ? (_openBlock(), _createElementBlock(\"img\", {\n      key: 0,\n      src: conversation.receiver.avatar_original == null ? 'assets/img/avatar-place.png' : conversation.receiver_avatar_original\n    }, null, 8\n    /* PROPS */\n    , _hoisted_10)) : (_openBlock(), _createElementBlock(\"img\", {\n      key: 1,\n      src: conversation.sender.avatar_original == null ? 'assets/img/avatar-place.png' : conversation.sender_avatar_original\n    }, null, 8\n    /* PROPS */\n    , _hoisted_11))])])]), _hoisted_12])])) : _createCommentVNode(\"v-if\", true)], 64\n    /* STABLE_FRAGMENT */\n    );\n  }), 128\n  /* KEYED_FRAGMENT */\n  )), _createCommentVNode(\" @endif\\r\\n          @endforeach \")])])]), _hoisted_14], 64\n  /* STABLE_FRAGMENT */\n  );\n}","map":{"version":3,"mappings":";;gCACMA,oBAMI,KANJ,EAMI;EANCC,KAAK,EAAC;AAMP,CANJ,EAAmC,cACnCD,oBAIM,KAJN,EAIM;EAJDC,KAAK,EAAC;AAIL,CAJN,EAAmC,cAC/BD,oBAEM,KAFN,EAEM;EAFDC,KAAK,EAAC;AAEL,CAFN,EAAqB,cACjBD,oBAA+B,GAA/B,EAA+B;EAA5BC,KAAK,EAAC;AAAsB,CAA/B,EAAc,eAAd,CADiB,CAArB,CAD+B,CAAnC,CADmC,CAAnC;;AAAA;;;EAQGA,KAAK,EAAC;;;EACJA,KAAK,EAAC;;;EACLA,KAAK,EAAC;;;;EAIsEA,KAAK,EAAC;;;EACnEA,KAAK,EAAC;;;EACFA,KAAK,EAAC;;;EACFA,KAAK,EAAC;;;EACDA,KAAK,EAAC;;;;;;;iCAsD1CD,oBAEM,KAFN,EAEM;EAFDC,KAAK,EAAC;AAEL,CAFN,EAA2B,cACxBC,sDADwB,CAA3B;;AAAA;;;6DAxEEC,YAQFH,oBA+DM,KA/DN,cA+DM,CA9DJA,oBA6DM,KA7DN,cA6DM,CA5DJA,oBA2DG,IA3DH,cA2DG,CA1DDE,mKA0DC,qBAxDGE,oBAoDWC,SApDX,EAoDW,IApDX,EAoDWC,YApD8BC,mBAoD9B,EApD2C,CAApCC,YAAoC,EAAvBC,KAAuB,KAAlB;;WAA0BA;OAAK,CACvDD,YAAY,CAACE,QAAb,IAAqB,IAArB,IAAiCF,YAAY,CAACG,MAAb,IAAmB,sBAA9DP,oBAkDS,IAlDT,cAkDS,CAjDHJ,oBAgDM,KAhDN,cAgDM,CA/CFA,oBAYM,KAZN,cAYM,CAXFA,oBAUM,KAVN,cAUM,CATFA,oBAQK,MARL,cAQK,CAPcO,WAAKK,IAAL,CAAUC,EAAV,IAAgBL,YAAY,CAACM,2BAC1CV,oBAA8H,KAA9H,EAA8H;YAAA;MAAxHW,GAAG,EAAEP,YAAY,CAACE,QAAb,CAAsBM,eAAtB,IAAqC,IAArC,GAAqC,6BAArC,GAA4ER,YAAY,CAACS;IAA0B,CAA9H;;IAAA,iCAGAb,oBAA0H,KAA1H,EAA0H;YAAA;MAApHW,GAAG,EAAEP,YAAY,CAACG,MAAb,CAAoBK,eAApB,IAAmC,IAAnC,GAAmC,6BAAnC,GAA0ER,YAAY,CAACU;IAAwB,CAA1H;;IAAA,eAGD,CARL,CASE,CAVN,CAWE,CAZN,CA+CE,EAlCFC,WAkCE,CAhDN,CAiDG,CAlDT,sCADiE;;;GAoDxD,CApDX;;EAAA,CAwDH,GAFGjB,wDAEH,CA3DH,CA4DI,CA7DN,CA8DI,CA/DN,GAgEAkB","names":["_createElementVNode","class","_createCommentVNode","_hoisted_1","_createElementBlock","_Fragment","_renderList","$data","conversation","index","receiver","sender","user","id","sender_id","src","avatar_original","receiver_avatar_original","sender_avatar_original","_hoisted_12","_hoisted_14"],"sourceRoot":"","sources":["E:\\adminDeal\\src\\components\\pages\\sellers\\pages\\conversation\\conversations.vue"],"sourcesContent":["<template>\r\n      <div class=\"aiz-titlebar mt-2 mb-4\">\r\n      <div class=\"row align-items-center\">\r\n          <div class=\"col-md-6\">\r\n              <b class=\"h4\">Conversations</b>\r\n          </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"card\">\r\n      <div class=\"card-body\">\r\n        <ul class=\"list-group list-group-flush\">\r\n          <!-- @foreach ($conversations as $key => $conversation)\r\n              @if ($conversation->receiver != null && $conversation->sender != null) -->\r\n              <template v-for=\"(conversation,index) in conversations\" :key=\"index\">\r\n                <li v-if=\"conversation.receiver != null && conversation.sender != null\" class=\"list-group-item px-0\">\r\n                      <div class=\"row gutters-10\">\r\n                          <div class=\"col-auto\">\r\n                              <div class=\"media\">\r\n                                  <span class=\"avatar avatar-sm flex-shrink-0\">\r\n                                     <template v-if=\"auth.user.id == conversation.sender_id\">\r\n                                        <img :src=\"conversation.receiver.avatar_original == null?'assets/img/avatar-place.png':conversation.receiver_avatar_original\">\r\n                                     </template>\r\n                                     <template v-else>\r\n                                        <img :src=\"conversation.sender.avatar_original == null?'assets/img/avatar-place.png':conversation.sender_avatar_original\">\r\n                                     </template>\r\n                                     \r\n                                </span>\r\n                              </div>\r\n                          </div>\r\n                          <div class=\"col-auto col-lg-3\">\r\n                              <p>\r\n                                  <!-- @if (Auth::user()->id == $conversation->sender_id) -->\r\n                                      <span class=\"fw-600\">receiver->name</span>\r\n                                  <!-- @else -->\r\n                                      <span class=\"fw-600\">sender->name</span>\r\n                                  <!-- @endif -->\r\n                                  <br>\r\n                                  <span class=\"opacity-50\">\r\n                                      <!-- {{ date('h:i:m d-m-Y', strtotime($conversation->messages->last()->created_at)) }} -->\r\n                                  </span>\r\n                              </p>\r\n                          </div>\r\n                          <div class=\"col-12 col-lg\">\r\n                              <div class=\"block-body\">\r\n                                  <div class=\"block-body-inner pb-3\">\r\n                                      <div class=\"row no-gutters\">\r\n                                          <div class=\"col\">\r\n                                              <h6 class=\"mt-0\">n.\r\n                                                  <a href=\"seller.conversations.show', encrypt($conversation->id\" class=\"text-dark fw-600\">\r\n                                                      conversation->title \r\n                                                  </a>\r\n                                                  <!-- @if ((Auth::user()->id == $conversation->sender_id && $conversation->sender_viewed == 0) || (Auth::user()->id == $conversation->receiver_id && $conversation->receiver_viewed == 0)) -->\r\n                                                      <span class=\"badge badge-inline badge-danger\">New</span>\r\n                                                  <!-- @endif -->\r\n                                              </h6>\r\n                                          </div>\r\n                                      </div>\r\n                                      <p class=\"mb-0 opacity-50\">\r\n                                          <!-- {{ $conversation->messages->last()->message }} -->\r\n                                      </p>\r\n                                  </div>\r\n                              </div>\r\n                          </div>\r\n                      </div>\r\n                    </li>\r\n              </template>\r\n                   \r\n              <!-- @endif\r\n          @endforeach -->\r\n      </ul>\r\n      </div>\r\n    </div>\r\n    <div class=\"aiz-pagination\">\r\n      \t<!-- {{ $conversations->links() }} -->\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nexport default {\r\n  data(){\r\n      return{\r\n          auth:{\r\n              isAuthenticated: false,\r\n              user: {},\r\n              },\r\n              conversations:[]\r\n      }\r\n  },\r\n  created(){\r\n      var user = localStorage.getItem(\"user\");\r\n          if(user !== null){\r\n              user = JSON.parse(user);\r\n              this.auth.isAuthenticated = true;\r\n              this.auth.user = user;\r\n          }\r\n          this.getConversations();\r\n  },\r\n  mounted() {\r\n  this.emitter.emit(\"headerFooter\", false);\r\n  console.log('unmounted has been called'); \r\n  },\r\n  unmounted() {\r\n  this.emitter.emit(\"headerFooter\", false);\r\n  console.log('unmounted has been called'); \r\n  },\r\n  methods:{\r\n      getConversations(){\r\n          axios.get(this.selfDomain+'vueseller/seller/conversations',{  \r\n          headers: {\r\n                  Authorization: \"Bearer \" + this.auth.user.access_token,\r\n            }\r\n\r\n          })\r\n          .then((response) => {    \r\n              this.conversations = response.data.conversations.data;\r\n              console.log(response.data.conversations.data);\r\n          })\r\n          .catch((err)=>{\r\n              console.log(err)\r\n          })\r\n      },\r\n   \r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n\r\n</style>"]},"metadata":{},"sourceType":"module"}