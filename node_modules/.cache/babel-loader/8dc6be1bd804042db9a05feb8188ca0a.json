{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = [\"id\", \"name\", \"disabled\", \"required\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"select\", {\n    class: \"form-control\",\n    id: $props.id,\n    name: $props.name,\n    disabled: $props.disabled,\n    required: $props.required\n  }, null, 8\n  /* PROPS */\n  , _hoisted_1)]);\n}","map":{"version":3,"mappings":";;;uBACEA,oBAEM,KAFN,EAEM,IAFN,EAEM,CADJC,oBAAsG,QAAtG,EAAsG;IAA9FC,KAAK,EAAC,cAAwF;IAAxEC,EAAE,EAAEC,SAAoE;IAA/DC,IAAI,EAAED,WAAyD;IAAlDE,QAAQ,EAAEF,eAAwC;IAA7BG,QAAQ,EAAEH;EAAmB,CAAtG;;EAAA,aACI,CAFN","names":["_createElementBlock","_createElementVNode","class","id","$props","name","disabled","required"],"sourceRoot":"","sources":["C:\\VUE\\adminDeal\\node_modules\\vue3-select2-component\\src\\Select2.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <select class=\"form-control\" :id=\"id\" :name=\"name\" :disabled=\"disabled\" :required=\"required\"></select>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport $ from 'jquery';\r\nimport 'select2/dist/js/select2.full';\r\nimport 'select2/dist/css/select2.min.css'\r\n\r\nexport default {\r\n  name: 'Select2',\r\n  data() {\r\n    return {\r\n      select2: null\r\n    };\r\n  },\r\n  emits: ['update:modelValue'],\r\n  props: {\r\n    modelValue: [String, Array], // previously was `value: String`\r\n    id: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    name: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    placeholder: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    options: {\r\n      type: Array,\r\n      default: () => []\r\n    },\r\n    disabled: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    required: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    settings: {\r\n      type: Object,\r\n      default: () => {}\r\n    },\r\n  },\r\n  watch: {\r\n    options: {\r\n      handler(val) {\r\n        this.setOption(val);\r\n      },\r\n      deep: true\r\n    },\r\n    modelValue: {\r\n      handler(val) {\r\n        this.setValue(val);\r\n      },\r\n      deep: true\r\n    },\r\n  },\r\n  methods: {\r\n    setOption(val = []) {\r\n      this.select2.empty();\r\n      this.select2.select2({\r\n        placeholder: this.placeholder,\r\n        ...this.settings,\r\n        data: val\r\n      });\r\n      this.setValue(this.modelValue);\r\n    },\r\n    setValue(val) {\r\n      if (val instanceof Array) {\r\n        this.select2.val([...val]);\r\n      } else {\r\n        this.select2.val([val]);\r\n      }\r\n      this.select2.trigger('change');\r\n    }\r\n  },\r\n  mounted() {\r\n    this.select2 = $(this.$el)\r\n      .find('select')\r\n      .select2({\r\n        placeholder: this.placeholder,\r\n        ...this.settings,\r\n        data: this.options\r\n      })\r\n      .on('select2:select select2:unselect', ev => {\r\n        this.$emit('update:modelValue', this.select2.val());\r\n        this.$emit('select', ev['params']['data']);\r\n      });\r\n    this.setValue(this.modelValue);\r\n  },\r\n  beforeUnmount() {\r\n    this.select2.select2('destroy');\r\n  }\r\n};\r\n</script>\r\n"]},"metadata":{},"sourceType":"module"}