{"ast":null,"code":"import { extend } from '../../../vue';\nimport { SLOT_NAME_TOP_ROW } from '../../../constants/slots';\nimport { isFunction } from '../../../utils/inspect';\nimport { BTr } from '../tr'; // --- Props ---\n\nexport var props = {}; // --- Mixin ---\n// @vue/component\n\nexport var topRowMixin = extend({\n  methods: {\n    renderTopRow: function renderTopRow() {\n      var fields = this.computedFields,\n          stacked = this.stacked,\n          tbodyTrClass = this.tbodyTrClass,\n          tbodyTrAttr = this.tbodyTrAttr;\n      var h = this.$createElement; // Add static Top Row slot (hidden in visibly stacked mode as we can't control the data-label)\n      // If in *always* stacked mode, we don't bother rendering the row\n\n      if (!this.hasNormalizedSlot(SLOT_NAME_TOP_ROW) || stacked === true || stacked === '') {\n        return h();\n      }\n\n      return h(BTr, {\n        staticClass: 'b-table-top-row',\n        class: [isFunction(tbodyTrClass) ? tbodyTrClass(null, 'row-top') : tbodyTrClass],\n        attrs: isFunction(tbodyTrAttr) ? tbodyTrAttr(null, 'row-top') : tbodyTrAttr,\n        key: 'b-top-row'\n      }, [this.normalizeSlot(SLOT_NAME_TOP_ROW, {\n        columns: fields.length,\n        fields: fields\n      })]);\n    }\n  }\n});","map":{"version":3,"names":["extend","SLOT_NAME_TOP_ROW","isFunction","BTr","props","topRowMixin","methods","renderTopRow","fields","computedFields","stacked","tbodyTrClass","tbodyTrAttr","h","$createElement","hasNormalizedSlot","staticClass","class","attrs","key","normalizeSlot","columns","length"],"sources":["C:/VUE/adminDeal/node_modules/bootstrap-vue/esm/components/table/helpers/mixin-top-row.js"],"sourcesContent":["import { extend } from '../../../vue';\r\nimport { SLOT_NAME_TOP_ROW } from '../../../constants/slots';\r\nimport { isFunction } from '../../../utils/inspect';\r\nimport { BTr } from '../tr'; // --- Props ---\r\n\r\nexport var props = {}; // --- Mixin ---\r\n// @vue/component\r\n\r\nexport var topRowMixin = extend({\r\n  methods: {\r\n    renderTopRow: function renderTopRow() {\r\n      var fields = this.computedFields,\r\n          stacked = this.stacked,\r\n          tbodyTrClass = this.tbodyTrClass,\r\n          tbodyTrAttr = this.tbodyTrAttr;\r\n      var h = this.$createElement; // Add static Top Row slot (hidden in visibly stacked mode as we can't control the data-label)\r\n      // If in *always* stacked mode, we don't bother rendering the row\r\n\r\n      if (!this.hasNormalizedSlot(SLOT_NAME_TOP_ROW) || stacked === true || stacked === '') {\r\n        return h();\r\n      }\r\n\r\n      return h(BTr, {\r\n        staticClass: 'b-table-top-row',\r\n        class: [isFunction(tbodyTrClass) ? tbodyTrClass(null, 'row-top') : tbodyTrClass],\r\n        attrs: isFunction(tbodyTrAttr) ? tbodyTrAttr(null, 'row-top') : tbodyTrAttr,\r\n        key: 'b-top-row'\r\n      }, [this.normalizeSlot(SLOT_NAME_TOP_ROW, {\r\n        columns: fields.length,\r\n        fields: fields\r\n      })]);\r\n    }\r\n  }\r\n});"],"mappings":"AAAA,SAASA,MAAT,QAAuB,cAAvB;AACA,SAASC,iBAAT,QAAkC,0BAAlC;AACA,SAASC,UAAT,QAA2B,wBAA3B;AACA,SAASC,GAAT,QAAoB,OAApB,C,CAA6B;;AAE7B,OAAO,IAAIC,KAAK,GAAG,EAAZ,C,CAAgB;AACvB;;AAEA,OAAO,IAAIC,WAAW,GAAGL,MAAM,CAAC;EAC9BM,OAAO,EAAE;IACPC,YAAY,EAAE,SAASA,YAAT,GAAwB;MACpC,IAAIC,MAAM,GAAG,KAAKC,cAAlB;MAAA,IACIC,OAAO,GAAG,KAAKA,OADnB;MAAA,IAEIC,YAAY,GAAG,KAAKA,YAFxB;MAAA,IAGIC,WAAW,GAAG,KAAKA,WAHvB;MAIA,IAAIC,CAAC,GAAG,KAAKC,cAAb,CALoC,CAKP;MAC7B;;MAEA,IAAI,CAAC,KAAKC,iBAAL,CAAuBd,iBAAvB,CAAD,IAA8CS,OAAO,KAAK,IAA1D,IAAkEA,OAAO,KAAK,EAAlF,EAAsF;QACpF,OAAOG,CAAC,EAAR;MACD;;MAED,OAAOA,CAAC,CAACV,GAAD,EAAM;QACZa,WAAW,EAAE,iBADD;QAEZC,KAAK,EAAE,CAACf,UAAU,CAACS,YAAD,CAAV,GAA2BA,YAAY,CAAC,IAAD,EAAO,SAAP,CAAvC,GAA2DA,YAA5D,CAFK;QAGZO,KAAK,EAAEhB,UAAU,CAACU,WAAD,CAAV,GAA0BA,WAAW,CAAC,IAAD,EAAO,SAAP,CAArC,GAAyDA,WAHpD;QAIZO,GAAG,EAAE;MAJO,CAAN,EAKL,CAAC,KAAKC,aAAL,CAAmBnB,iBAAnB,EAAsC;QACxCoB,OAAO,EAAEb,MAAM,CAACc,MADwB;QAExCd,MAAM,EAAEA;MAFgC,CAAtC,CAAD,CALK,CAAR;IASD;EAtBM;AADqB,CAAD,CAAxB"},"metadata":{},"sourceType":"module"}