{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { MutationObs, isElement } from './dom';\nimport { warnNoMutationObserverSupport } from './warn';\n/**\r\n * Observe a DOM element changes, falls back to eventListener mode\r\n * @param {Element} el The DOM element to observe\r\n * @param {Function} callback callback to be called on change\r\n * @param {object} [options={childList: true, subtree: true}] observe options\r\n * @see https://stackoverflow.com/questions/3219758\r\n */\n\nexport var observeDom = function observeDom(el, callback, options)\n/* istanbul ignore next: difficult to test in JSDOM */\n{\n  // Handle cases where we might be passed a Vue instance\n  el = el ? el.$el || el : null; // Early exit when we have no element\n\n  /* istanbul ignore next: difficult to test in JSDOM */\n\n  if (!isElement(el)) {\n    return null;\n  } // Exit and throw a warning when `MutationObserver` isn't available\n\n\n  if (warnNoMutationObserverSupport('observeDom')) {\n    return null;\n  } // Define a new observer\n\n\n  var obs = new MutationObs(function (mutations) {\n    var changed = false; // A mutation can contain several change records, so we loop\n    // through them to see what has changed\n    // We break out of the loop early if any \"significant\" change\n    // has been detected\n\n    for (var i = 0; i < mutations.length && !changed; i++) {\n      // The mutation record\n      var mutation = mutations[i]; // Mutation type\n\n      var type = mutation.type; // DOM node (could be any DOM node type - HTMLElement, Text, comment, etc.)\n\n      var target = mutation.target; // Detect whether a change happened based on type and target\n\n      if (type === 'characterData' && target.nodeType === Node.TEXT_NODE) {\n        // We ignore nodes that are not TEXT (i.e. comments, etc.)\n        // as they don't change layout\n        changed = true;\n      } else if (type === 'attributes') {\n        changed = true;\n      } else if (type === 'childList' && (mutation.addedNodes.length > 0 || mutation.removedNodes.length > 0)) {\n        // This includes HTMLElement and text nodes being\n        // added/removed/re-arranged\n        changed = true;\n      }\n    } // We only call the callback if a change that could affect\n    // layout/size truly happened\n\n\n    if (changed) {\n      callback();\n    }\n  }); // Have the observer observe foo for changes in children, etc\n\n  obs.observe(el, _objectSpread({\n    childList: true,\n    subtree: true\n  }, options)); // We return a reference to the observer so that `obs.disconnect()`\n  // can be called if necessary\n  // To reduce overhead when the root element is hidden\n\n  return obs;\n};","map":{"version":3,"names":["ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","configurable","writable","MutationObs","isElement","warnNoMutationObserverSupport","observeDom","el","callback","options","$el","obs","mutations","changed","mutation","type","nodeType","Node","TEXT_NODE","addedNodes","removedNodes","observe","childList","subtree"],"sources":["D:/VUE/adminDeal/node_modules/bootstrap-vue/esm/utils/observe-dom.js"],"sourcesContent":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\r\n\r\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\r\n\r\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\r\n\r\nimport { MutationObs, isElement } from './dom';\r\nimport { warnNoMutationObserverSupport } from './warn';\r\n/**\r\n * Observe a DOM element changes, falls back to eventListener mode\r\n * @param {Element} el The DOM element to observe\r\n * @param {Function} callback callback to be called on change\r\n * @param {object} [options={childList: true, subtree: true}] observe options\r\n * @see https://stackoverflow.com/questions/3219758\r\n */\r\n\r\nexport var observeDom = function observeDom(el, callback, options)\r\n/* istanbul ignore next: difficult to test in JSDOM */\r\n{\r\n  // Handle cases where we might be passed a Vue instance\r\n  el = el ? el.$el || el : null; // Early exit when we have no element\r\n\r\n  /* istanbul ignore next: difficult to test in JSDOM */\r\n\r\n  if (!isElement(el)) {\r\n    return null;\r\n  } // Exit and throw a warning when `MutationObserver` isn't available\r\n\r\n\r\n  if (warnNoMutationObserverSupport('observeDom')) {\r\n    return null;\r\n  } // Define a new observer\r\n\r\n\r\n  var obs = new MutationObs(function (mutations) {\r\n    var changed = false; // A mutation can contain several change records, so we loop\r\n    // through them to see what has changed\r\n    // We break out of the loop early if any \"significant\" change\r\n    // has been detected\r\n\r\n    for (var i = 0; i < mutations.length && !changed; i++) {\r\n      // The mutation record\r\n      var mutation = mutations[i]; // Mutation type\r\n\r\n      var type = mutation.type; // DOM node (could be any DOM node type - HTMLElement, Text, comment, etc.)\r\n\r\n      var target = mutation.target; // Detect whether a change happened based on type and target\r\n\r\n      if (type === 'characterData' && target.nodeType === Node.TEXT_NODE) {\r\n        // We ignore nodes that are not TEXT (i.e. comments, etc.)\r\n        // as they don't change layout\r\n        changed = true;\r\n      } else if (type === 'attributes') {\r\n        changed = true;\r\n      } else if (type === 'childList' && (mutation.addedNodes.length > 0 || mutation.removedNodes.length > 0)) {\r\n        // This includes HTMLElement and text nodes being\r\n        // added/removed/re-arranged\r\n        changed = true;\r\n      }\r\n    } // We only call the callback if a change that could affect\r\n    // layout/size truly happened\r\n\r\n\r\n    if (changed) {\r\n      callback();\r\n    }\r\n  }); // Have the observer observe foo for changes in children, etc\r\n\r\n  obs.observe(el, _objectSpread({\r\n    childList: true,\r\n    subtree: true\r\n  }, options)); // We return a reference to the observer so that `obs.disconnect()`\r\n  // can be called if necessary\r\n  // To reduce overhead when the root element is hidden\r\n\r\n  return obs;\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}