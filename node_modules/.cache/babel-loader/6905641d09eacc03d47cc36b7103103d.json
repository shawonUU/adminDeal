{"ast":null,"code":"import $ from 'jquery';\nimport 'select2/dist/js/select2.full';\nimport 'select2/dist/css/select2.min.css';\nexport default {\n  name: 'Select2',\n\n  data() {\n    return {\n      select2: null\n    };\n  },\n\n  emits: ['update:modelValue'],\n  props: {\n    modelValue: [String, Array],\n    // previously was `value: String`\n    id: {\n      type: String,\n      default: ''\n    },\n    name: {\n      type: String,\n      default: ''\n    },\n    placeholder: {\n      type: String,\n      default: ''\n    },\n    options: {\n      type: Array,\n      default: () => []\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    required: {\n      type: Boolean,\n      default: false\n    },\n    settings: {\n      type: Object,\n      default: () => {}\n    }\n  },\n  watch: {\n    options: {\n      handler(val) {\n        this.setOption(val);\n      },\n\n      deep: true\n    },\n    modelValue: {\n      handler(val) {\n        this.setValue(val);\n      },\n\n      deep: true\n    }\n  },\n  methods: {\n    setOption(val = []) {\n      this.select2.empty();\n      this.select2.select2({\n        placeholder: this.placeholder,\n        ...this.settings,\n        data: val\n      });\n      this.setValue(this.modelValue);\n    },\n\n    setValue(val) {\n      if (val instanceof Array) {\n        this.select2.val([...val]);\n      } else {\n        this.select2.val([val]);\n      }\n\n      this.select2.trigger('change');\n    }\n\n  },\n\n  mounted() {\n    this.select2 = $(this.$el).find('select').select2({\n      placeholder: this.placeholder,\n      ...this.settings,\n      data: this.options\n    }).on('select2:select select2:unselect', ev => {\n      this.$emit('update:modelValue', this.select2.val());\n      this.$emit('select', ev['params']['data']);\n    });\n    this.setValue(this.modelValue);\n  },\n\n  beforeUnmount() {\n    this.select2.select2('destroy');\n  }\n\n};","map":{"version":3,"mappings":"AAOA,OAAOA,CAAP,MAAc,QAAd;AACA,OAAO,8BAAP;AACA,OAAO,kCAAP;AAEA,eAAe;EACbC,IAAI,EAAE,SADO;;EAEbC,IAAI,GAAG;IACL,OAAO;MACLC,OAAO,EAAE;IADJ,CAAP;EAGD,CANY;;EAObC,KAAK,EAAE,CAAC,mBAAD,CAPM;EAQbC,KAAK,EAAE;IACLC,UAAU,EAAE,CAACC,MAAD,EAASC,KAAT,CADP;IACwB;IAC7BC,EAAE,EAAE;MACFC,IAAI,EAAEH,MADJ;MAEFI,OAAO,EAAE;IAFP,CAFC;IAMLV,IAAI,EAAE;MACJS,IAAI,EAAEH,MADF;MAEJI,OAAO,EAAE;IAFL,CAND;IAULC,WAAW,EAAE;MACXF,IAAI,EAAEH,MADK;MAEXI,OAAO,EAAE;IAFE,CAVR;IAcLE,OAAO,EAAE;MACPH,IAAI,EAAEF,KADC;MAEPG,OAAO,EAAE,MAAM;IAFR,CAdJ;IAkBLG,QAAQ,EAAE;MACRJ,IAAI,EAAEK,OADE;MAERJ,OAAO,EAAE;IAFD,CAlBL;IAsBLK,QAAQ,EAAE;MACRN,IAAI,EAAEK,OADE;MAERJ,OAAO,EAAE;IAFD,CAtBL;IA0BLM,QAAQ,EAAE;MACRP,IAAI,EAAEQ,MADE;MAERP,OAAO,EAAE,MAAM,CAAC;IAFR;EA1BL,CARM;EAuCbQ,KAAK,EAAE;IACLN,OAAO,EAAE;MACPO,OAAO,CAACC,GAAD,EAAM;QACX,KAAKC,SAAL,CAAeD,GAAf;MACD,CAHM;;MAIPE,IAAI,EAAE;IAJC,CADJ;IAOLjB,UAAU,EAAE;MACVc,OAAO,CAACC,GAAD,EAAM;QACX,KAAKG,QAAL,CAAcH,GAAd;MACD,CAHS;;MAIVE,IAAI,EAAE;IAJI;EAPP,CAvCM;EAqDbE,OAAO,EAAE;IACPH,SAAS,CAACD,GAAE,GAAI,EAAP,EAAW;MAClB,KAAKlB,OAAL,CAAauB,KAAb;MACA,KAAKvB,OAAL,CAAaA,OAAb,CAAqB;QACnBS,WAAW,EAAE,KAAKA,WADC;QAEnB,GAAG,KAAKK,QAFW;QAGnBf,IAAI,EAAEmB;MAHa,CAArB;MAKA,KAAKG,QAAL,CAAc,KAAKlB,UAAnB;IACD,CATM;;IAUPkB,QAAQ,CAACH,GAAD,EAAM;MACZ,IAAIA,GAAE,YAAab,KAAnB,EAA0B;QACxB,KAAKL,OAAL,CAAakB,GAAb,CAAiB,CAAC,GAAGA,GAAJ,CAAjB;MACF,CAFA,MAEO;QACL,KAAKlB,OAAL,CAAakB,GAAb,CAAiB,CAACA,GAAD,CAAjB;MACF;;MACA,KAAKlB,OAAL,CAAawB,OAAb,CAAqB,QAArB;IACF;;EAjBO,CArDI;;EAwEbC,OAAO,GAAG;IACR,KAAKzB,OAAL,GAAeH,CAAC,CAAC,KAAK6B,GAAN,CAAD,CACZC,IADY,CACP,QADO,EAEZ3B,OAFY,CAEJ;MACPS,WAAW,EAAE,KAAKA,WADX;MAEP,GAAG,KAAKK,QAFD;MAGPf,IAAI,EAAE,KAAKW;IAHJ,CAFI,EAOZkB,EAPY,CAOT,iCAPS,EAO0BC,EAAC,IAAK;MAC3C,KAAKC,KAAL,CAAW,mBAAX,EAAgC,KAAK9B,OAAL,CAAakB,GAAb,EAAhC;MACA,KAAKY,KAAL,CAAW,QAAX,EAAqBD,EAAE,CAAC,QAAD,CAAF,CAAa,MAAb,CAArB;IACD,CAVY,CAAf;IAWA,KAAKR,QAAL,CAAc,KAAKlB,UAAnB;EACD,CArFY;;EAsFb4B,aAAa,GAAG;IACd,KAAK/B,OAAL,CAAaA,OAAb,CAAqB,SAArB;EACF;;AAxFa,CAAf","names":["$","name","data","select2","emits","props","modelValue","String","Array","id","type","default","placeholder","options","disabled","Boolean","required","settings","Object","watch","handler","val","setOption","deep","setValue","methods","empty","trigger","mounted","$el","find","on","ev","$emit","beforeUnmount"],"sourceRoot":"","sources":["E:\\adminDeal\\node_modules\\vue3-select2-component\\src\\Select2.vue"],"sourcesContent":["<template>\n  <div>\n    <select class=\"form-control\" :id=\"id\" :name=\"name\" :disabled=\"disabled\" :required=\"required\"></select>\n  </div>\n</template>\n\n<script>\nimport $ from 'jquery';\nimport 'select2/dist/js/select2.full';\nimport 'select2/dist/css/select2.min.css'\n\nexport default {\n  name: 'Select2',\n  data() {\n    return {\n      select2: null\n    };\n  },\n  emits: ['update:modelValue'],\n  props: {\n    modelValue: [String, Array], // previously was `value: String`\n    id: {\n      type: String,\n      default: ''\n    },\n    name: {\n      type: String,\n      default: ''\n    },\n    placeholder: {\n      type: String,\n      default: ''\n    },\n    options: {\n      type: Array,\n      default: () => []\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    required: {\n      type: Boolean,\n      default: false\n    },\n    settings: {\n      type: Object,\n      default: () => {}\n    },\n  },\n  watch: {\n    options: {\n      handler(val) {\n        this.setOption(val);\n      },\n      deep: true\n    },\n    modelValue: {\n      handler(val) {\n        this.setValue(val);\n      },\n      deep: true\n    },\n  },\n  methods: {\n    setOption(val = []) {\n      this.select2.empty();\n      this.select2.select2({\n        placeholder: this.placeholder,\n        ...this.settings,\n        data: val\n      });\n      this.setValue(this.modelValue);\n    },\n    setValue(val) {\n      if (val instanceof Array) {\n        this.select2.val([...val]);\n      } else {\n        this.select2.val([val]);\n      }\n      this.select2.trigger('change');\n    }\n  },\n  mounted() {\n    this.select2 = $(this.$el)\n      .find('select')\n      .select2({\n        placeholder: this.placeholder,\n        ...this.settings,\n        data: this.options\n      })\n      .on('select2:select select2:unselect', ev => {\n        this.$emit('update:modelValue', this.select2.val());\n        this.$emit('select', ev['params']['data']);\n      });\n    this.setValue(this.modelValue);\n  },\n  beforeUnmount() {\n    this.select2.select2('destroy');\n  }\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}