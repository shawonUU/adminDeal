{"ast":null,"code":"import { NAME_COLLAPSE } from '../../constants/components';\nimport { IS_BROWSER } from '../../constants/env';\nimport { EVENT_OPTIONS_PASSIVE } from '../../constants/events';\nimport { CODE_ENTER, CODE_SPACE } from '../../constants/key-codes';\nimport { RX_HASH, RX_HASH_ID, RX_SPACE_SPLIT } from '../../constants/regex';\nimport { arrayIncludes, concat } from '../../utils/array';\nimport { getInstanceFromDirective } from '../../utils/get-instance-from-directive';\nimport { addClass, getAttr, hasAttr, isDisabled, isTag, removeAttr, removeClass, removeStyle, requestAF, setAttr, setStyle } from '../../utils/dom';\nimport { getRootActionEventName, getRootEventName, eventOn, eventOff } from '../../utils/events';\nimport { isString } from '../../utils/inspect';\nimport { looseEqual } from '../../utils/loose-equal';\nimport { keys } from '../../utils/object';\nimport { getEventRoot } from '../../utils/get-event-root'; // --- Constants ---\n// Classes to apply to trigger element\n\nvar CLASS_BV_TOGGLE_COLLAPSED = 'collapsed';\nvar CLASS_BV_TOGGLE_NOT_COLLAPSED = 'not-collapsed'; // Property key for handler storage\n\nvar BV_BASE = '__BV_toggle'; // Root event listener property (Function)\n\nvar BV_TOGGLE_ROOT_HANDLER = \"\".concat(BV_BASE, \"_HANDLER__\"); // Trigger element click handler property (Function)\n\nvar BV_TOGGLE_CLICK_HANDLER = \"\".concat(BV_BASE, \"_CLICK__\"); // Target visibility state property (Boolean)\n\nvar BV_TOGGLE_STATE = \"\".concat(BV_BASE, \"_STATE__\"); // Target ID list property (Array)\n\nvar BV_TOGGLE_TARGETS = \"\".concat(BV_BASE, \"_TARGETS__\"); // Commonly used strings\n\nvar STRING_FALSE = 'false';\nvar STRING_TRUE = 'true'; // Commonly used attribute names\n\nvar ATTR_ARIA_CONTROLS = 'aria-controls';\nvar ATTR_ARIA_EXPANDED = 'aria-expanded';\nvar ATTR_ROLE = 'role';\nvar ATTR_TABINDEX = 'tabindex'; // Commonly used style properties\n\nvar STYLE_OVERFLOW_ANCHOR = 'overflow-anchor'; // Emitted control event for collapse (emitted to collapse)\n\nvar ROOT_ACTION_EVENT_NAME_TOGGLE = getRootActionEventName(NAME_COLLAPSE, 'toggle'); // Listen to event for toggle state update (emitted by collapse)\n\nvar ROOT_EVENT_NAME_STATE = getRootEventName(NAME_COLLAPSE, 'state'); // Private event emitted on `$root` to ensure the toggle state is always synced\n// Gets emitted even if the state of b-collapse has not changed\n// This event is NOT to be documented as people should not be using it\n\nvar ROOT_EVENT_NAME_SYNC_STATE = getRootEventName(NAME_COLLAPSE, 'sync-state'); // Private event we send to collapse to request state update sync event\n\nvar ROOT_ACTION_EVENT_NAME_REQUEST_STATE = getRootActionEventName(NAME_COLLAPSE, 'request-state');\nvar KEYDOWN_KEY_CODES = [CODE_ENTER, CODE_SPACE]; // --- Helper methods ---\n\nvar isNonStandardTag = function isNonStandardTag(el) {\n  return !arrayIncludes(['button', 'a'], el.tagName.toLowerCase());\n};\n\nvar getTargets = function getTargets(_ref, el) {\n  var modifiers = _ref.modifiers,\n      arg = _ref.arg,\n      value = _ref.value; // Any modifiers are considered target IDs\n\n  var targets = keys(modifiers || {}); // If value is a string, split out individual targets (if space delimited)\n\n  value = isString(value) ? value.split(RX_SPACE_SPLIT) : value; // Support target ID as link href (`href=\"#id\"`)\n\n  if (isTag(el.tagName, 'a')) {\n    var href = getAttr(el, 'href') || '';\n\n    if (RX_HASH_ID.test(href)) {\n      targets.push(href.replace(RX_HASH, ''));\n    }\n  } // Add ID from `arg` (if provided), and support value\n  // as a single string ID or an array of string IDs\n  // If `value` is not an array or string, then it gets filtered out\n\n\n  concat(arg, value).forEach(function (t) {\n    return isString(t) && targets.push(t);\n  }); // Return only unique and truthy target IDs\n\n  return targets.filter(function (t, index, arr) {\n    return t && arr.indexOf(t) === index;\n  });\n};\n\nvar removeClickListener = function removeClickListener(el) {\n  var handler = el[BV_TOGGLE_CLICK_HANDLER];\n\n  if (handler) {\n    eventOff(el, 'click', handler, EVENT_OPTIONS_PASSIVE);\n    eventOff(el, 'keydown', handler, EVENT_OPTIONS_PASSIVE);\n  }\n\n  el[BV_TOGGLE_CLICK_HANDLER] = null;\n};\n\nvar addClickListener = function addClickListener(el, instance) {\n  removeClickListener(el);\n\n  if (instance) {\n    var handler = function handler(event) {\n      if (!(event.type === 'keydown' && !arrayIncludes(KEYDOWN_KEY_CODES, event.keyCode)) && !isDisabled(el)) {\n        var targets = el[BV_TOGGLE_TARGETS] || [];\n        targets.forEach(function (target) {\n          getEventRoot(instance).$emit(ROOT_ACTION_EVENT_NAME_TOGGLE, target);\n        });\n      }\n    };\n\n    el[BV_TOGGLE_CLICK_HANDLER] = handler;\n    eventOn(el, 'click', handler, EVENT_OPTIONS_PASSIVE);\n\n    if (isNonStandardTag(el)) {\n      eventOn(el, 'keydown', handler, EVENT_OPTIONS_PASSIVE);\n    }\n  }\n};\n\nvar removeRootListeners = function removeRootListeners(el, instance) {\n  if (el[BV_TOGGLE_ROOT_HANDLER] && instance) {\n    getEventRoot(instance).$off([ROOT_EVENT_NAME_STATE, ROOT_EVENT_NAME_SYNC_STATE], el[BV_TOGGLE_ROOT_HANDLER]);\n  }\n\n  el[BV_TOGGLE_ROOT_HANDLER] = null;\n};\n\nvar addRootListeners = function addRootListeners(el, instance) {\n  removeRootListeners(el, instance);\n\n  if (instance) {\n    var handler = function handler(id, state) {\n      // `state` will be `true` if target is expanded\n      if (arrayIncludes(el[BV_TOGGLE_TARGETS] || [], id)) {\n        // Set/Clear 'collapsed' visibility class state\n        el[BV_TOGGLE_STATE] = state; // Set `aria-expanded` and class state on trigger element\n\n        setToggleState(el, state);\n      }\n    };\n\n    el[BV_TOGGLE_ROOT_HANDLER] = handler; // Listen for toggle state changes (public) and sync (private)\n\n    getEventRoot(instance).$on([ROOT_EVENT_NAME_STATE, ROOT_EVENT_NAME_SYNC_STATE], handler);\n  }\n};\n\nvar setToggleState = function setToggleState(el, state) {\n  // State refers to the visibility of the collapse/sidebar\n  if (state) {\n    removeClass(el, CLASS_BV_TOGGLE_COLLAPSED);\n    addClass(el, CLASS_BV_TOGGLE_NOT_COLLAPSED);\n    setAttr(el, ATTR_ARIA_EXPANDED, STRING_TRUE);\n  } else {\n    removeClass(el, CLASS_BV_TOGGLE_NOT_COLLAPSED);\n    addClass(el, CLASS_BV_TOGGLE_COLLAPSED);\n    setAttr(el, ATTR_ARIA_EXPANDED, STRING_FALSE);\n  }\n}; // Reset and remove a property from the provided element\n\n\nvar resetProp = function resetProp(el, prop) {\n  el[prop] = null;\n  delete el[prop];\n}; // Handle directive updates\n\n\nvar handleUpdate = function handleUpdate(el, binding, vnode) {\n  /* istanbul ignore next: should never happen */\n  if (!IS_BROWSER || !getInstanceFromDirective(vnode, binding)) {\n    return;\n  } // If element is not a button or link, we add `role=\"button\"`\n  // and `tabindex=\"0\"` for accessibility reasons\n\n\n  if (isNonStandardTag(el)) {\n    if (!hasAttr(el, ATTR_ROLE)) {\n      setAttr(el, ATTR_ROLE, 'button');\n    }\n\n    if (!hasAttr(el, ATTR_TABINDEX)) {\n      setAttr(el, ATTR_TABINDEX, '0');\n    }\n  } // Ensure the collapse class and `aria-*` attributes persist\n  // after element is updated (either by parent re-rendering\n  // or changes to this element or its contents)\n\n\n  setToggleState(el, el[BV_TOGGLE_STATE]); // Parse list of target IDs\n\n  var targets = getTargets(binding, el); // Ensure the `aria-controls` hasn't been overwritten\n  // or removed when vnode updates\n  // Also ensure to set `overflow-anchor` to `none` to prevent\n  // the browser's scroll anchoring behavior\n\n  /* istanbul ignore else */\n\n  if (targets.length > 0) {\n    setAttr(el, ATTR_ARIA_CONTROLS, targets.join(' '));\n    setStyle(el, STYLE_OVERFLOW_ANCHOR, 'none');\n  } else {\n    removeAttr(el, ATTR_ARIA_CONTROLS);\n    removeStyle(el, STYLE_OVERFLOW_ANCHOR);\n  } // Add/Update our click listener(s)\n  // Wrap in a `requestAF()` to allow any previous\n  // click handling to occur first\n\n\n  requestAF(function () {\n    addClickListener(el, getInstanceFromDirective(vnode, binding));\n  }); // If targets array has changed, update\n\n  if (!looseEqual(targets, el[BV_TOGGLE_TARGETS])) {\n    // Update targets array to element storage\n    el[BV_TOGGLE_TARGETS] = targets; // Ensure `aria-controls` is up to date\n    // Request a state update from targets so that we can\n    // ensure expanded state is correct (in most cases)\n\n    targets.forEach(function (target) {\n      getEventRoot(getInstanceFromDirective(vnode, binding)).$emit(ROOT_ACTION_EVENT_NAME_REQUEST_STATE, target);\n    });\n  }\n};\n/*\r\n * Export our directive\r\n */\n\n\nexport var VBToggle = {\n  bind: function bind(el, binding, vnode) {\n    // State is initially collapsed until we receive a state event\n    el[BV_TOGGLE_STATE] = false; // Assume no targets initially\n\n    el[BV_TOGGLE_TARGETS] = []; // Add our root listeners\n\n    addRootListeners(el, getInstanceFromDirective(vnode, binding)); // Initial update of trigger\n\n    handleUpdate(el, binding, vnode);\n  },\n  componentUpdated: handleUpdate,\n  updated: handleUpdate,\n  unbind: function unbind(el, binding, vnode) {\n    removeClickListener(el); // Remove our $root listener\n\n    removeRootListeners(el, getInstanceFromDirective(vnode, binding)); // Reset custom props\n\n    resetProp(el, BV_TOGGLE_ROOT_HANDLER);\n    resetProp(el, BV_TOGGLE_CLICK_HANDLER);\n    resetProp(el, BV_TOGGLE_STATE);\n    resetProp(el, BV_TOGGLE_TARGETS); // Reset classes/attrs/styles\n\n    removeClass(el, CLASS_BV_TOGGLE_COLLAPSED);\n    removeClass(el, CLASS_BV_TOGGLE_NOT_COLLAPSED);\n    removeAttr(el, ATTR_ARIA_EXPANDED);\n    removeAttr(el, ATTR_ARIA_CONTROLS);\n    removeAttr(el, ATTR_ROLE);\n    removeStyle(el, STYLE_OVERFLOW_ANCHOR);\n  }\n};","map":{"version":3,"names":["NAME_COLLAPSE","IS_BROWSER","EVENT_OPTIONS_PASSIVE","CODE_ENTER","CODE_SPACE","RX_HASH","RX_HASH_ID","RX_SPACE_SPLIT","arrayIncludes","concat","getInstanceFromDirective","addClass","getAttr","hasAttr","isDisabled","isTag","removeAttr","removeClass","removeStyle","requestAF","setAttr","setStyle","getRootActionEventName","getRootEventName","eventOn","eventOff","isString","looseEqual","keys","getEventRoot","CLASS_BV_TOGGLE_COLLAPSED","CLASS_BV_TOGGLE_NOT_COLLAPSED","BV_BASE","BV_TOGGLE_ROOT_HANDLER","BV_TOGGLE_CLICK_HANDLER","BV_TOGGLE_STATE","BV_TOGGLE_TARGETS","STRING_FALSE","STRING_TRUE","ATTR_ARIA_CONTROLS","ATTR_ARIA_EXPANDED","ATTR_ROLE","ATTR_TABINDEX","STYLE_OVERFLOW_ANCHOR","ROOT_ACTION_EVENT_NAME_TOGGLE","ROOT_EVENT_NAME_STATE","ROOT_EVENT_NAME_SYNC_STATE","ROOT_ACTION_EVENT_NAME_REQUEST_STATE","KEYDOWN_KEY_CODES","isNonStandardTag","el","tagName","toLowerCase","getTargets","_ref","modifiers","arg","value","targets","split","href","test","push","replace","forEach","t","filter","index","arr","indexOf","removeClickListener","handler","addClickListener","instance","event","type","keyCode","target","$emit","removeRootListeners","$off","addRootListeners","id","state","setToggleState","$on","resetProp","prop","handleUpdate","binding","vnode","length","join","VBToggle","bind","componentUpdated","updated","unbind"],"sources":["C:/VUE/adminDeal/node_modules/bootstrap-vue/esm/directives/toggle/toggle.js"],"sourcesContent":["import { NAME_COLLAPSE } from '../../constants/components';\r\nimport { IS_BROWSER } from '../../constants/env';\r\nimport { EVENT_OPTIONS_PASSIVE } from '../../constants/events';\r\nimport { CODE_ENTER, CODE_SPACE } from '../../constants/key-codes';\r\nimport { RX_HASH, RX_HASH_ID, RX_SPACE_SPLIT } from '../../constants/regex';\r\nimport { arrayIncludes, concat } from '../../utils/array';\r\nimport { getInstanceFromDirective } from '../../utils/get-instance-from-directive';\r\nimport { addClass, getAttr, hasAttr, isDisabled, isTag, removeAttr, removeClass, removeStyle, requestAF, setAttr, setStyle } from '../../utils/dom';\r\nimport { getRootActionEventName, getRootEventName, eventOn, eventOff } from '../../utils/events';\r\nimport { isString } from '../../utils/inspect';\r\nimport { looseEqual } from '../../utils/loose-equal';\r\nimport { keys } from '../../utils/object';\r\nimport { getEventRoot } from '../../utils/get-event-root'; // --- Constants ---\r\n// Classes to apply to trigger element\r\n\r\nvar CLASS_BV_TOGGLE_COLLAPSED = 'collapsed';\r\nvar CLASS_BV_TOGGLE_NOT_COLLAPSED = 'not-collapsed'; // Property key for handler storage\r\n\r\nvar BV_BASE = '__BV_toggle'; // Root event listener property (Function)\r\n\r\nvar BV_TOGGLE_ROOT_HANDLER = \"\".concat(BV_BASE, \"_HANDLER__\"); // Trigger element click handler property (Function)\r\n\r\nvar BV_TOGGLE_CLICK_HANDLER = \"\".concat(BV_BASE, \"_CLICK__\"); // Target visibility state property (Boolean)\r\n\r\nvar BV_TOGGLE_STATE = \"\".concat(BV_BASE, \"_STATE__\"); // Target ID list property (Array)\r\n\r\nvar BV_TOGGLE_TARGETS = \"\".concat(BV_BASE, \"_TARGETS__\"); // Commonly used strings\r\n\r\nvar STRING_FALSE = 'false';\r\nvar STRING_TRUE = 'true'; // Commonly used attribute names\r\n\r\nvar ATTR_ARIA_CONTROLS = 'aria-controls';\r\nvar ATTR_ARIA_EXPANDED = 'aria-expanded';\r\nvar ATTR_ROLE = 'role';\r\nvar ATTR_TABINDEX = 'tabindex'; // Commonly used style properties\r\n\r\nvar STYLE_OVERFLOW_ANCHOR = 'overflow-anchor'; // Emitted control event for collapse (emitted to collapse)\r\n\r\nvar ROOT_ACTION_EVENT_NAME_TOGGLE = getRootActionEventName(NAME_COLLAPSE, 'toggle'); // Listen to event for toggle state update (emitted by collapse)\r\n\r\nvar ROOT_EVENT_NAME_STATE = getRootEventName(NAME_COLLAPSE, 'state'); // Private event emitted on `$root` to ensure the toggle state is always synced\r\n// Gets emitted even if the state of b-collapse has not changed\r\n// This event is NOT to be documented as people should not be using it\r\n\r\nvar ROOT_EVENT_NAME_SYNC_STATE = getRootEventName(NAME_COLLAPSE, 'sync-state'); // Private event we send to collapse to request state update sync event\r\n\r\nvar ROOT_ACTION_EVENT_NAME_REQUEST_STATE = getRootActionEventName(NAME_COLLAPSE, 'request-state');\r\nvar KEYDOWN_KEY_CODES = [CODE_ENTER, CODE_SPACE]; // --- Helper methods ---\r\n\r\nvar isNonStandardTag = function isNonStandardTag(el) {\r\n  return !arrayIncludes(['button', 'a'], el.tagName.toLowerCase());\r\n};\r\n\r\nvar getTargets = function getTargets(_ref, el) {\r\n  var modifiers = _ref.modifiers,\r\n      arg = _ref.arg,\r\n      value = _ref.value;\r\n  // Any modifiers are considered target IDs\r\n  var targets = keys(modifiers || {}); // If value is a string, split out individual targets (if space delimited)\r\n\r\n  value = isString(value) ? value.split(RX_SPACE_SPLIT) : value; // Support target ID as link href (`href=\"#id\"`)\r\n\r\n  if (isTag(el.tagName, 'a')) {\r\n    var href = getAttr(el, 'href') || '';\r\n\r\n    if (RX_HASH_ID.test(href)) {\r\n      targets.push(href.replace(RX_HASH, ''));\r\n    }\r\n  } // Add ID from `arg` (if provided), and support value\r\n  // as a single string ID or an array of string IDs\r\n  // If `value` is not an array or string, then it gets filtered out\r\n\r\n\r\n  concat(arg, value).forEach(function (t) {\r\n    return isString(t) && targets.push(t);\r\n  }); // Return only unique and truthy target IDs\r\n\r\n  return targets.filter(function (t, index, arr) {\r\n    return t && arr.indexOf(t) === index;\r\n  });\r\n};\r\n\r\nvar removeClickListener = function removeClickListener(el) {\r\n  var handler = el[BV_TOGGLE_CLICK_HANDLER];\r\n\r\n  if (handler) {\r\n    eventOff(el, 'click', handler, EVENT_OPTIONS_PASSIVE);\r\n    eventOff(el, 'keydown', handler, EVENT_OPTIONS_PASSIVE);\r\n  }\r\n\r\n  el[BV_TOGGLE_CLICK_HANDLER] = null;\r\n};\r\n\r\nvar addClickListener = function addClickListener(el, instance) {\r\n  removeClickListener(el);\r\n\r\n  if (instance) {\r\n    var handler = function handler(event) {\r\n      if (!(event.type === 'keydown' && !arrayIncludes(KEYDOWN_KEY_CODES, event.keyCode)) && !isDisabled(el)) {\r\n        var targets = el[BV_TOGGLE_TARGETS] || [];\r\n        targets.forEach(function (target) {\r\n          getEventRoot(instance).$emit(ROOT_ACTION_EVENT_NAME_TOGGLE, target);\r\n        });\r\n      }\r\n    };\r\n\r\n    el[BV_TOGGLE_CLICK_HANDLER] = handler;\r\n    eventOn(el, 'click', handler, EVENT_OPTIONS_PASSIVE);\r\n\r\n    if (isNonStandardTag(el)) {\r\n      eventOn(el, 'keydown', handler, EVENT_OPTIONS_PASSIVE);\r\n    }\r\n  }\r\n};\r\n\r\nvar removeRootListeners = function removeRootListeners(el, instance) {\r\n  if (el[BV_TOGGLE_ROOT_HANDLER] && instance) {\r\n    getEventRoot(instance).$off([ROOT_EVENT_NAME_STATE, ROOT_EVENT_NAME_SYNC_STATE], el[BV_TOGGLE_ROOT_HANDLER]);\r\n  }\r\n\r\n  el[BV_TOGGLE_ROOT_HANDLER] = null;\r\n};\r\n\r\nvar addRootListeners = function addRootListeners(el, instance) {\r\n  removeRootListeners(el, instance);\r\n\r\n  if (instance) {\r\n    var handler = function handler(id, state) {\r\n      // `state` will be `true` if target is expanded\r\n      if (arrayIncludes(el[BV_TOGGLE_TARGETS] || [], id)) {\r\n        // Set/Clear 'collapsed' visibility class state\r\n        el[BV_TOGGLE_STATE] = state; // Set `aria-expanded` and class state on trigger element\r\n\r\n        setToggleState(el, state);\r\n      }\r\n    };\r\n\r\n    el[BV_TOGGLE_ROOT_HANDLER] = handler; // Listen for toggle state changes (public) and sync (private)\r\n\r\n    getEventRoot(instance).$on([ROOT_EVENT_NAME_STATE, ROOT_EVENT_NAME_SYNC_STATE], handler);\r\n  }\r\n};\r\n\r\nvar setToggleState = function setToggleState(el, state) {\r\n  // State refers to the visibility of the collapse/sidebar\r\n  if (state) {\r\n    removeClass(el, CLASS_BV_TOGGLE_COLLAPSED);\r\n    addClass(el, CLASS_BV_TOGGLE_NOT_COLLAPSED);\r\n    setAttr(el, ATTR_ARIA_EXPANDED, STRING_TRUE);\r\n  } else {\r\n    removeClass(el, CLASS_BV_TOGGLE_NOT_COLLAPSED);\r\n    addClass(el, CLASS_BV_TOGGLE_COLLAPSED);\r\n    setAttr(el, ATTR_ARIA_EXPANDED, STRING_FALSE);\r\n  }\r\n}; // Reset and remove a property from the provided element\r\n\r\n\r\nvar resetProp = function resetProp(el, prop) {\r\n  el[prop] = null;\r\n  delete el[prop];\r\n}; // Handle directive updates\r\n\r\n\r\nvar handleUpdate = function handleUpdate(el, binding, vnode) {\r\n  /* istanbul ignore next: should never happen */\r\n  if (!IS_BROWSER || !getInstanceFromDirective(vnode, binding)) {\r\n    return;\r\n  } // If element is not a button or link, we add `role=\"button\"`\r\n  // and `tabindex=\"0\"` for accessibility reasons\r\n\r\n\r\n  if (isNonStandardTag(el)) {\r\n    if (!hasAttr(el, ATTR_ROLE)) {\r\n      setAttr(el, ATTR_ROLE, 'button');\r\n    }\r\n\r\n    if (!hasAttr(el, ATTR_TABINDEX)) {\r\n      setAttr(el, ATTR_TABINDEX, '0');\r\n    }\r\n  } // Ensure the collapse class and `aria-*` attributes persist\r\n  // after element is updated (either by parent re-rendering\r\n  // or changes to this element or its contents)\r\n\r\n\r\n  setToggleState(el, el[BV_TOGGLE_STATE]); // Parse list of target IDs\r\n\r\n  var targets = getTargets(binding, el); // Ensure the `aria-controls` hasn't been overwritten\r\n  // or removed when vnode updates\r\n  // Also ensure to set `overflow-anchor` to `none` to prevent\r\n  // the browser's scroll anchoring behavior\r\n\r\n  /* istanbul ignore else */\r\n\r\n  if (targets.length > 0) {\r\n    setAttr(el, ATTR_ARIA_CONTROLS, targets.join(' '));\r\n    setStyle(el, STYLE_OVERFLOW_ANCHOR, 'none');\r\n  } else {\r\n    removeAttr(el, ATTR_ARIA_CONTROLS);\r\n    removeStyle(el, STYLE_OVERFLOW_ANCHOR);\r\n  } // Add/Update our click listener(s)\r\n  // Wrap in a `requestAF()` to allow any previous\r\n  // click handling to occur first\r\n\r\n\r\n  requestAF(function () {\r\n    addClickListener(el, getInstanceFromDirective(vnode, binding));\r\n  }); // If targets array has changed, update\r\n\r\n  if (!looseEqual(targets, el[BV_TOGGLE_TARGETS])) {\r\n    // Update targets array to element storage\r\n    el[BV_TOGGLE_TARGETS] = targets; // Ensure `aria-controls` is up to date\r\n    // Request a state update from targets so that we can\r\n    // ensure expanded state is correct (in most cases)\r\n\r\n    targets.forEach(function (target) {\r\n      getEventRoot(getInstanceFromDirective(vnode, binding)).$emit(ROOT_ACTION_EVENT_NAME_REQUEST_STATE, target);\r\n    });\r\n  }\r\n};\r\n/*\r\n * Export our directive\r\n */\r\n\r\n\r\nexport var VBToggle = {\r\n  bind: function bind(el, binding, vnode) {\r\n    // State is initially collapsed until we receive a state event\r\n    el[BV_TOGGLE_STATE] = false; // Assume no targets initially\r\n\r\n    el[BV_TOGGLE_TARGETS] = []; // Add our root listeners\r\n\r\n    addRootListeners(el, getInstanceFromDirective(vnode, binding)); // Initial update of trigger\r\n\r\n    handleUpdate(el, binding, vnode);\r\n  },\r\n  componentUpdated: handleUpdate,\r\n  updated: handleUpdate,\r\n  unbind: function unbind(el, binding, vnode) {\r\n    removeClickListener(el); // Remove our $root listener\r\n\r\n    removeRootListeners(el, getInstanceFromDirective(vnode, binding)); // Reset custom props\r\n\r\n    resetProp(el, BV_TOGGLE_ROOT_HANDLER);\r\n    resetProp(el, BV_TOGGLE_CLICK_HANDLER);\r\n    resetProp(el, BV_TOGGLE_STATE);\r\n    resetProp(el, BV_TOGGLE_TARGETS); // Reset classes/attrs/styles\r\n\r\n    removeClass(el, CLASS_BV_TOGGLE_COLLAPSED);\r\n    removeClass(el, CLASS_BV_TOGGLE_NOT_COLLAPSED);\r\n    removeAttr(el, ATTR_ARIA_EXPANDED);\r\n    removeAttr(el, ATTR_ARIA_CONTROLS);\r\n    removeAttr(el, ATTR_ROLE);\r\n    removeStyle(el, STYLE_OVERFLOW_ANCHOR);\r\n  }\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}