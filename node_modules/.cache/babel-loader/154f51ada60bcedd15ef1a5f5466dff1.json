{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"track-container\"\n};\nconst _hoisted_2 = {\n  class: \"range-value min\"\n};\nconst _hoisted_3 = {\n  class: \"range-value max\"\n};\nconst _hoisted_4 = {\n  class: \"track\",\n  ref: \"_vpcTrack\"\n};\nconst _hoisted_5 = {\n  class: \"track-highlight\",\n  ref: \"trackHighlight\"\n};\nconst _hoisted_6 = {\n  class: \"track-btn track1\",\n  ref: \"track1\"\n};\nconst _hoisted_7 = {\n  class: \"track-btn track2\",\n  ref: \"track2\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"span\", _hoisted_2, _toDisplayString($data.minValue), 1\n  /* TEXT */\n  ), _createTextVNode(), _createElementVNode(\"span\", _hoisted_3, _toDisplayString($data.maxValue), 1\n  /* TEXT */\n  ), _createElementVNode(\"div\", _hoisted_4, null, 512\n  /* NEED_PATCH */\n  ), _createElementVNode(\"div\", _hoisted_5, null, 512\n  /* NEED_PATCH */\n  ), _createElementVNode(\"button\", _hoisted_6, null, 512\n  /* NEED_PATCH */\n  ), _createElementVNode(\"button\", _hoisted_7, null, 512\n  /* NEED_PATCH */\n  )]);\n}","map":{"version":3,"mappings":";;EAESA,KAAK,EAAC;;;EACHA,KAAK,EAAC;;;EAA8CA,KAAK,EAAC;;;EAC3DA,KAAK,EAAC;EAAQC,GAAG,EAAC;;;EAClBD,KAAK,EAAC;EAAkBC,GAAG,EAAC;;;EACzBD,KAAK,EAAC;EAAmBC,GAAG,EAAC;;;EAC7BD,KAAK,EAAC;EAAmBC,GAAG,EAAC;;;uBALvCC,oBAMM,KANN,cAMM,CALJC,oBAAmD,MAAnD,cAAmDC,iBAAlBC,cAAkB,CAAnD,EAAyC;EAAA;EAAzC,CAKI,sBALgDF,oBAAmD,MAAnD,cAAmDC,iBAAlBC,cAAkB,CAAnD,EAAyC;EAAA;EAAzC,CAKhD,EAJJF,oBAAyC,KAAzC,cAAyC,IAAzC,EAAyC;EAAA;EAAzC,CAII,EAHJA,oBAAwD,KAAxD,cAAwD,IAAxD,EAAwD;EAAA;EAAxD,CAGI,EAFJA,oBAAuD,QAAvD,cAAuD,IAAvD,EAAuD;EAAA;EAAvD,CAEI,EADJA,oBAAuD,QAAvD,cAAuD,IAAvD,EAAuD;EAAA;EAAvD,CACI,CANN","names":["class","ref","_createElementBlock","_createElementVNode","_toDisplayString","$data"],"sourceRoot":"","sources":["F:\\adminDeal\\src\\components\\pages\\FrontEnd\\Range.vue"],"sourcesContent":["<template>\r\n    \r\n    <div class=\"track-container\">\r\n      <span class=\"range-value min\">{{ minValue}} </span> <span class=\"range-value max\">{{ maxValue }}</span>\r\n      <div class=\"track\" ref=\"_vpcTrack\"></div>\r\n      <div class=\"track-highlight\" ref=\"trackHighlight\"></div>\r\n      <button class=\"track-btn track1\" ref=\"track1\"></button>\r\n      <button class=\"track-btn track2\" ref=\"track2\"></button>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n\r\nexport default {\r\n  name: \"PriceRangeSlider\",\r\n\r\n  props: {\r\n    trackHeight: {\r\n      type: Number,\r\n      deafult: 1\r\n    }\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      min: 10,\r\n      max: 210,\r\n      minValue: 40,\r\n      maxValue: 150,\r\n      step: 5,\r\n      totalSteps: 0,\r\n      percentPerStep: 1,\r\n      trackWidth: null,\r\n      isDragging: false,\r\n      pos: {\r\n        curTrack: null\r\n      }\r\n    \r\n    }\r\n  },\r\n\r\n  methods: {\r\n    moveTrack(track, ev){\r\n      \r\n      let percentInPx = this.getPercentInPx();\r\n      \r\n      let trackX = Math.round(this.$refs._vpcTrack.getBoundingClientRect().left);\r\n      let clientX = ev.clientX;\r\n      let moveDiff = clientX-trackX;\r\n\r\n      let moveInPct = moveDiff / percentInPx\r\n      // console.log(moveInPct)\r\n\r\n      if(moveInPct<1 || moveInPct>100) return;\r\n      let value = ( Math.round(moveInPct / this.percentPerStep) * this.step ) + this.min;\r\n      if(track==='track1'){\r\n        if(value >= (this.maxValue - this.step)) return;\r\n        this.minValue = value;\r\n      }\r\n\r\n      if(track==='track2'){\r\n        if(value <= (this.minValue + this.step)) return;\r\n        this.maxValue = value;\r\n      }\r\n      \r\n      this.$refs[track].style.left = moveInPct + '%';\r\n      this.setTrackHightlight()\r\n            \r\n    },\r\n    mousedown(ev, track){\r\n\r\n      if(this.isDragging) return;\r\n      this.isDragging = true;\r\n      this.pos.curTrack = track;\r\n    },\r\n\r\n    touchstart(ev, track){\r\n      this.mousedown(ev, track)\r\n    },\r\n\r\n    mouseup(ev, track){\r\n      if(!this.isDragging) return;\r\n      this.isDragging = false\r\n    },\r\n\r\n    touchend(ev, track){\r\n      this.mouseup(ev, track)\r\n    },\r\n\r\n    mousemove(ev, track){\r\n      if(!this.isDragging) return;      \r\n      this.moveTrack(track, ev)\r\n    },\r\n\r\n    touchmove(ev, track){\r\n      this.mousemove(ev.changedTouches[0], track)\r\n    },\r\n\r\n    valueToPercent(value){\r\n      return ((value - this.min) / this.step) * this.percentPerStep\r\n    },\r\n\r\n    setTrackHightlight(){\r\n      this.$refs.trackHighlight.style.left = this.valueToPercent(this.minValue) + '%'\r\n      this.$refs.trackHighlight.style.width = (this.valueToPercent(this.maxValue) - this.valueToPercent(this.minValue)) + '%'\r\n    },\r\n\r\n    getPercentInPx(){\r\n      let trackWidth = this.$refs._vpcTrack.offsetWidth;\r\n      let oneStepInPx = trackWidth / this.totalSteps;\r\n      // 1 percent in px\r\n      let percentInPx = oneStepInPx / this.percentPerStep;\r\n      \r\n      return percentInPx;\r\n    },\r\n\r\n    setClickMove(ev){\r\n      let track1Left = this.$refs.track1.getBoundingClientRect().left;\r\n      let track2Left = this.$refs.track2.getBoundingClientRect().left;\r\n      // console.log('track1Left', track1Left)\r\n      if(ev.clientX < track1Left){\r\n        this.moveTrack('track1', ev)\r\n      }else if((ev.clientX - track1Left) < (track2Left - ev.clientX) ){\r\n        this.moveTrack('track1', ev)\r\n      }else{\r\n        this.moveTrack('track2', ev)\r\n      }\r\n    }\r\n  },\r\n\r\n  mounted() {\r\n    // calc per step value\r\n    this.totalSteps = (this.max - this.min) / this.step;\r\n\r\n    // percent the track button to be moved on each step\r\n    this.percentPerStep = 100 / this.totalSteps;\r\n    // console.log('percentPerStep', this.percentPerStep)\r\n\r\n    // set track1 initilal\r\n    document.querySelector('.track1').style.left = this.valueToPercent(this.minValue) + '%'\r\n    // track2 initial position\r\n    document.querySelector('.track2').style.left = this.valueToPercent(this.maxValue) + '%'\r\n    // set initila track highlight\r\n    this.setTrackHightlight()\r\n\r\n    var self = this;\r\n\r\n    ['mouseup', 'mousemove'].forEach( type => {\r\n      document.body.addEventListener(type, (ev) => {\r\n        // ev.preventDefault();\r\n        if(self.isDragging && self.pos.curTrack){\r\n          self[type](ev, self.pos.curTrack)\r\n        }\r\n      })\r\n    });\r\n\r\n    ['mousedown', 'mouseup', 'mousemove', 'touchstart', 'touchmove', 'touchend'].forEach( type => {\r\n      document.querySelector('.track1').addEventListener(type, (ev) => {\r\n        ev.stopPropagation();\r\n        self[type](ev, 'track1')\r\n      })\r\n\r\n      document.querySelector('.track2').addEventListener(type, (ev) => {\r\n        ev.stopPropagation();\r\n        self[type](ev, 'track2')\r\n      })\r\n    })\r\n\r\n    // on track clik\r\n    // determine direction based on click proximity\r\n    // determine percent to move based on track.clientX - click.clientX\r\n    document.querySelector('.track').addEventListener('click', function(ev) {\r\n      ev.stopPropagation();\r\n      self.setClickMove(ev)\r\n      \r\n    })\r\n\r\n    document.querySelector('.track-highlight').addEventListener('click', function(ev) {\r\n      ev.stopPropagation();\r\n      self.setClickMove(ev)\r\n      \r\n    })\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n\r\n  .range-value{\r\n    position: absolute;\r\n    top: -2rem;\r\n  }\r\n  .range-value.min{\r\n    left: 0;\r\n  }\r\n\r\n  .range-value.max{\r\n    right: 0;\r\n  }\r\n  .track-container{\r\n    width: 100%;\r\n    position: relative;\r\n    cursor: pointer;\r\n    height: 0.5rem;\r\n  }\r\n\r\n  .track,\r\n  .track-highlight {\r\n    display: block;\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 0.5rem;\r\n  }\r\n\r\n  .track{\r\n    background-color: #ddd;\r\n  }\r\n\r\n  .track-highlight{\r\n    background-color: black;\r\n    z-index: 2;\r\n  }\r\n\r\n  .track-btn{\r\n    -webkit-appearance: none;\r\n    -moz-appearance: none;\r\n    appearance: none;\r\n    outline: none;\r\n    cursor: pointer;\r\n    display: block;\r\n    position: absolute;\r\n    z-index: 2;\r\n    width: 1.5rem;\r\n    height: 1.5rem;\r\n    top: calc(-50% - 0.25rem);\r\n    margin-left: -1rem;\r\n    border: none;\r\n    background-color: black;\r\n    -ms-touch-action: pan-x;\r\n    touch-action: pan-x;\r\n    transition: box-shadow .3s ease-out,background-color .3s ease,-webkit-transform .3s ease-out;\r\n    transition: transform .3s ease-out,box-shadow .3s ease-out,background-color .3s ease;\r\n    transition: transform .3s ease-out,box-shadow .3s ease-out,background-color .3s ease,-webkit-transform .3s ease-out;\r\n  }\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}